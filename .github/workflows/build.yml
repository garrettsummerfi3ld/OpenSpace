name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

# Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
env:
  BUILD_TYPE: Release
  BUILD_DIR: ${{github.workspace}}/build
  BUILD_DIR_WIN: C:\OpenSpace\build

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, ubuntu-20.04 ]
        qt-ver: [ 6.2.*, 6.5.* ]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }} - Qt ${{ matrix.qt-ver }} 

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    # Qt is not friendly to install manually, nor any runner has Qt installed by default, this action resolves this issue
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3.0.0
      with:
        version: ${{ matrix.qt-ver }}

    - name: Install dependencies
      run: sudo apt install -y gdal-bin libgdal-dev libxrandr-dev libxinerama-dev xorg-dev libxcursor-dev libxi-dev libasound2-dev libgdal-dev libboost-dev freeglut3-dev glew-utils libpng-dev libcurl4-openssl-dev libmpv-dev libvulkan-dev zlib1g-dev

    - name: Install GCC/G++ 11
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt install -y g++-11 gcc-11

    - name: Configure CMake
      run: cmake -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/g++-11 -DCMAKE_C_COMPILER:FILEPATH=/usr/bin/gcc-11 -DASSIMP_BUILD_MINIZIP=1

    - name: Build
      run: make -C ${{github.workspace}}/build

  build-win:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, windows-2019 ]
        qt-ver: [ 6.2.*, 6.5.* ]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }} - Qt ${{ matrix.qt-ver }} 
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    # Qt is not friendly to install manually, nor any runner has Qt installed by default, this action resolves this issue
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3.0.0
      with:
        version: ${{ matrix.qt-ver }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1.3
    
    - name: Install dependencies
      run: choco install boost-msvc-14.3

    # Due to a limitation on free GitHub runners, we need a larger build drive, the C:\ drive on the runner will suffice
    - name: Hack - Move repository to larger drive
      run: |
        cp ${{github.workspace}} C:\OpenSpace
        ls C:\

    - name: Configure CMake (Visual Studio 2022)
      if: matrix.os == 'windows-latest'
      run: cmake -B ${{env.BUILD_DIR_WIN}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "Visual Studio 17 2022"

    - name: Configure CMake (Visual Studio 2019)
      if: matrix.os == 'windows-2019'
      run: cmake -B ${{env.BUILD_DIR_WIN}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "Visual Studio 16 2019"

    - name: Build
      run: msbuild ${{env.BUILD_DIR_WIN}}/OpenSpace.sln /p:Configuration=Release /p:Platform=x64

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-13, macos-12 ]
        qt-ver: [ 6.2.*, 6.5.* ]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }} - Qt ${{ matrix.qt-ver }} 

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    # Qt is not friendly to install manually, nor any runner has Qt installed by default, this action resolves this issue
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3.0.0
      with:
        version: ${{ matrix.qt-ver }}

    - name: Install dependencies
      run: brew install glew freeimage boost curl gdal mpv vulkan-headers vulkan-loader brotli

    - name: Configure Cmake
      run: cmake -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "Xcode"

    - name: Build
      run: xcodebuild -project ${{github.workspace}}/build/OpenSpace.xcodeproj -scheme ALL_BUILD build 

  deploy-win:
    # needs: build-win
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, windows-2019 ]
        qt-ver: [ 6.2.*, 6.5.* ]
    runs-on: ${{ matrix.os }}
    name: Deploy on ${{ matrix.os }} - Qt ${{ matrix.qt-ver }} 
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    # Qt is not friendly to install manually, nor any runner has Qt installed by default, this action resolves this issue
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3.0.0
      with:
        version: ${{ matrix.qt-ver }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1.3
    
    - name: Install dependencies
      run: choco install boost-msvc-14.3

    # Due to a limitation on free GitHub runners, we need a larger build drive, the C:\ drive on the runner will suffice
    #- name: Hack - Move repository to larger drive
    #  run: |
    #    cp ${{github.workspace}} C:\OpenSpace
    #    ls C:\
      
    - name: Run Deploy Script inside repository
      run: ./deploy.bat
       
    - name: Find zip files
      run: |
        Get-ChildItem .\OpenSpace.zip
        Get-ChildItem .\pdbs.zip
