name: Build

on:
  workflow_run:
    workflows: [ Sync fork ]
    types:
      - completed
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: false

# Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
env:
  BUILD_TYPE: Release
  BUILD_DIR: ${{ github.workspace }}/build
  BUILD_DIR_WIN: C:\OpenSpace\build

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, ubuntu-22.04, ubuntu-20.04 ]
        qt-ver: [ 5.15, 6.2, 6.5 ]
        compiler: 
          - { compiler: GCC, cc: gcc-11, cxx: g++-11 }
          # - { compiler: Clang, cc: clang, cxx: clang++ }
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }} with ${{ matrix.compiler.compiler }} - Qt ${{ matrix.qt-ver }} 

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    # Qt is not friendly to install manually, nor any runner has Qt installed by default, this action resolves this issue
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3.0.0
      with:
        version: ${{ matrix.qt-ver }}

    - name: Install dependencies
      run: sudo apt install -y gdal-bin libgdal-dev libxrandr-dev libxinerama-dev xorg-dev libxcursor-dev libxi-dev libasound2-dev libgdal-dev libboost-dev freeglut3-dev glew-utils libpng-dev libcurl4-openssl-dev libmpv-dev libvulkan-dev zlib1g-dev

    - name: Install updated mpv
      if: matrix.os == 'ubuntu-20.04'
      run: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew update
        brew install mpv
      
    - name: Install updated gcc/g++ 11
      if: matrix.os == 'ubuntu-20.04' && matrix.compiler.compiler == 'GCC'
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt install -y g++-11 gcc-11

    - name: Install updated Clang
      if:  matrix.os == 'ubuntu-20.04' && matrix.compiler.compiler == 'Clang'
      uses: egor-tensin/setup-clang@v1

    - name: Configure CMake
      run: cmake -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/${{ matrix.compiler.cxx }} -DCMAKE_C_COMPILER:FILEPATH=/usr/bin/${{ matrix.compiler.cc }} -DASSIMP_BUILD_MINIZIP=1

    - name: Build
      run: make -C ${{ github.workspace }}/build

  build-win:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, windows-2022, windows-2019 ]
        qt-ver: [ 6.2, 6.5 ]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }} - Qt ${{ matrix.qt-ver }} 
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    # Qt is not friendly to install manually, nor any runner has Qt installed by default, this action resolves this issue
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3.0.0
      with:
        version: ${{ matrix.qt-ver }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1.3
    
    - name: Install dependencies
      run: choco install boost-msvc-14.3

    # Due to a limitation on free GitHub runners, we need a larger build drive, the C:\ drive on the runner will suffice
    - name: Hack - Move repository to larger drive
      run: |
        cp ${{github.workspace}} C:\OpenSpace
        ls C:\

    - name: Configure CMake (Visual Studio 2022)
      if: matrix.os == 'windows-latest' || matrix.os == 'windows-2022'
      run: cmake -B ${{ env.BUILD_DIR_WIN }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -G "Visual Studio 17 2022"

    - name: Configure CMake (Visual Studio 2019)
      if: matrix.os == 'windows-2019'
      run: cmake -B ${{ env.BUILD_DIR_WIN }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -G "Visual Studio 16 2019"

    - name: Build
      run: msbuild ${{ env.BUILD_DIR_WIN }}/OpenSpace.sln /p:Configuration=Release /p:Platform=x64

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, macos-13, macos-12 ]
        qt-ver: [ 6.2, 6.5 ]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }} - Qt ${{ matrix.qt-ver }} 

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    # Qt is not friendly to install manually, nor any runner has Qt installed by default, this action resolves this issue
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3.0.0
      with:
        version: ${{ matrix.qt-ver }}

    - name: Install dependencies
      run: brew install glew freeimage boost curl gdal mpv vulkan-headers vulkan-loader brotli

    - name: Configure Cmake
      run: cmake -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -G "Xcode"

    - name: Build
      run: xcodebuild -project ${{ github.workspace }}/build/OpenSpace.xcodeproj -scheme ALL_BUILD build 

  deploy-win:
    needs: build-win
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        qt-ver: [ 6.5 ]
    runs-on: ${{ matrix.os }}
    name: Deploy on ${{ matrix.os }} - Qt ${{ matrix.qt-ver }} 
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    # Qt is not friendly to install manually, nor any runner has Qt installed by default, this action resolves this issue
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3.0.0
      with:
        version: ${{ matrix.qt-ver }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1.3
    
    - name: Install dependencies
      run: choco install boost-msvc-14.3

    # Due to a limitation on free GitHub runners, we need a larger build drive, the C:\ drive on the runner will suffice
    - name: Hack - Move repository to larger drive
      run: |
        cp ${{github.workspace}} C:\OpenSpace
        ls C:\
      
    - name: Run CMake into 'build-deploy' folder
      run: |
        cmake -DSGCT_BUILD_TESTS=OFF^ -DGHOUL_HIGH_DEBUG_MODE=OFF^ -DGHOUL_HAVE_TESTS=OFF^ -DOPENSPACE_HAVE_TESTS=OFF^ -DOPENSPACE_ENABLE_ALL_MODULES=ON^ -B C:\OpenSpace\build-deploy
          
    - name: Build OpenSpace in RelWithDebInfo mode
      run: |
        cmake --build C:\OpenSpace\build-deploy --config RelWithDebInfo --target OpenSpace --parallel -- /p:CL_MPcount=16
          
    - name: Upload PDB artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pdbs
        path: ${{ github.workspace }}/bin/RelWithDebInfo/*.pdb
        if-no-files-found: error

    - name: Cleanup files before archiving artifact
      shell: cmd
      run: |
        del ${{ github.workspace }}\bin\RelWithDebInfo\*.pdb
        del ${{ github.workspace }}\bin\RelWithDebInfo\codegen.exe
        del ${{ github.workspace }}\bin\RelWithDebInfo\Qt6Svg.dll
        rmdir /S /Q ${{ github.workspace }}\bin\RelWithDebInfo\iconengines
        rmdir /S /Q ${{ github.workspace }}\bin\RelWithDebInfo\imageformats
        rmdir /S /Q ${{ github.workspace }}\bin\RelWithDebInfo\networkinformation

    - name: Reset Documentation
      continue-on-error: true
      run: |
        copy ${{ github.workspace }}\documentation\documentationData.js ${{ github.workspace }}
        git checkout HEAD -- documentationData.js

    - name: Cleanup 'bin/' directory
      continue-on-error: true
      shell: cmd
      run: |
        robocopy ${{ github.workspace }}\\bin\\RelWithDebInfo bin /E /MOV
        rmdir /S /Q ${{ github.workspace }}\\bin\\RelWithDebInfo

    - name: cURL Microsoft VC++ Resistributable
      continue-on-error: true
      run: curl "http://aka.ms/vs/17/release/vc_redist.x64.exe" --output vc_redist.x64.exe -L
      
    - name: Upload OpenSpace artifacts
      uses: actions/upload-artifact@v3
      with:
        name: OpenSpace
        path: |
          ${{ github.workspace }}/bin/*
          config/*
          data/*
          documentation/*
          scripts/*
          shaders/*
          ACKNOWLEDGMENTS.md
          CITATION.cff
          CODE_OF_CONDUCT.md
          COMMIT.md
          CREDITS.md
          LICENSE.md
          openspace.cfg
          README.md
          vc_redist.x64.exe
          modules/*/shaders/*
          modules/*/scripts/*
          modules/globebrowsing/gdal_data/*
          modules/webgui/ext/nodejs/node.exe
          !documentation/.git
        if-no-files-found: error
